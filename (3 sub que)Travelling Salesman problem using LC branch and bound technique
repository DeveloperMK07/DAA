#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// A node structure representing a partial solution in the Branch and Bound tree
struct Node {
    vector<int> path;  // Path taken to reach this node (partial tour)
    int cost;          // Cost of the current path
    int level;         // The level in the search tree (number of cities visited)

    Node(vector<int> p, int c, int l) : path(p), cost(c), level(l) {}
};

// Function to check if a given node is a leaf node (fully visited tour)
bool isLeafNode(const Node& node, int n) {
    return node.level == n;  // If all cities are visited, it's a leaf node
}

int main() {
    int n;
    cout << "Enter the number of cities: ";
    cin >> n;

    vector<vector<int>> dist(n, vector<int>(n));
    cout << "Enter the distance matrix (n x n):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> dist[i][j];
        }
    }

    // Input the path of the node
    cout << "Enter the path (space-separated city indices, terminated by -1): ";
    vector<int> path;
    int city;
    while (cin >> city && city != -1) {
        path.push_back(city);
    }

    // Calculate the cost of the given path
    int cost = 0;
    for (size_t i = 1; i < path.size(); i++) {
        cost += dist[path[i - 1]][path[i]];
    }

    // Determine the level (number of cities visited)
    int level = path.size();

    // Create the node
    Node userNode(path, cost, level);

    // Check if the node is a leaf node
    cout << "Path entered: ";
    for (int c : userNode.path) {
        cout << c << " ";
    }
    cout << "\nCost: " << userNode.cost << endl;

    if (isLeafNode(userNode, n)) {
        cout << "The node is a leaf node (all cities visited).\n";
    } else {
        cout << "The node is NOT a leaf node (not all cities visited).\n";
    }

    return 0;
}

TC AND SC: n2
