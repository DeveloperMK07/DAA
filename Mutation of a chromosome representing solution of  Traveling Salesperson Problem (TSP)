#include <iostream>
#include <vector>
#include <cstdlib> // For rand() and srand()
#include <ctime>   // For seeding rand()
using namespace std;

// Function to perform mutation on a chromosome (TSP solution)
void mutate(vector<int>& chromosome) {
    int n = chromosome.size();
    if (n < 2) return; // Mutation is not possible with fewer than 2 cities

    // Randomly select two indices to swap
    int index1 = rand() % n;
    int index2 = rand() % n;

    // Ensure the indices are different
    while (index1 == index2) {
        index2 = rand() % n;
    }

    // Swap the two cities
    swap(chromosome[index1], chromosome[index2]);
}

// Function to calculate the total distance of a TSP solution
int calculateDistance(const vector<int>& chromosome, const vector<vector<int>>& matrix) {
    int totalDistance = 0;
    int n = chromosome.size();
    for (int i = 0; i < n - 1; i++) {
        totalDistance += matrix[chromosome[i] - 1][chromosome[i + 1] - 1];
    }
    // Add the distance to return to the starting city
    totalDistance += matrix[chromosome[n - 1] - 1][chromosome[0] - 1];
    return totalDistance;
}

int main() {
    srand(time(0)); // Seed the random number generator

    // Input the distance matrix
    int n = 4; // For simplicity, we assume a fixed size of 4
    vector<vector<int>> matrix(n, vector<int>(n));
    cout << "Enter the 4x4 distance matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    // Input the chromosome representing the TSP solution
    vector<int> chromosome(n);
    cout << "Enter the cities in the chromosome (space-separated, 1 to " << n << "): ";
    for (int i = 0; i < n; i++) {
        cin >> chromosome[i];
    }

    cout << "Original chromosome: ";
    for (int city : chromosome) {
        cout << city << " ";
    }
    cout << endl;

    // Calculate and display the total distance before mutation
    int originalDistance = calculateDistance(chromosome, matrix);
    cout << "Total distance (original): " << originalDistance << endl;

    // Perform mutation
    mutate(chromosome);

    cout << "Mutated chromosome: ";
    for (int city : chromosome) {
        cout << city << " ";
    }
    cout << endl;

    // Calculate and display the total distance after mutation
    int mutatedDistance = calculateDistance(chromosome, matrix);
    cout << "Total distance (mutated): " << mutatedDistance << endl;

    return 0;
}

TC: n^2
SC: n
