#include <iostream>
#include <vector>
using namespace std;

// Function to check if a queen can be placed on the board at position (row, col)
bool isSafe(const vector<vector<int>>& board, int row, int col, int N) {
    // Check the column for other queens
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return false; // Another queen is placed in the same column
        }
    }

    // Check the upper-left diagonal
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false; // Another queen is placed in the upper-left diagonal
        }
    }

    // Check the upper-right diagonal
    for (int i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return false; // Another queen is placed in the upper-right diagonal
        }
    }

    return true; // No conflicts
}

// Function to solve the N-Queens problem using Backtracking
bool solveNQueens(vector<vector<int>>& board, int row, int N) {
    // Base case: If all queens are placed
    if (row == N) {
        return true;
    }

    // Try placing this queen in all columns for the current row
    for (int col = 0; col < N; col++) {
        // Check if placing the queen is safe
        if (isSafe(board, row, col, N)) {
            // Place the queen
            board[row][col] = 1;

            // Recur to place the next queen
            if (solveNQueens(board, row + 1, N)) {
                return true;
            }

            // If placing queen in (row, col) doesn't lead to a solution, backtrack
            board[row][col] = 0;
        }
    }

    // If no column works, return false (backtrack)
    return false;
}

// Function to print the board configuration
void printBoard(const vector<vector<int>>& board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << (board[i][j] == 1 ? "Q " : ". ");
        }
        cout << endl;
    }
}

int main() {
    int N;
    cout << "Enter the size of the chessboard (N): ";
    cin >> N;

    // Create a 2D vector to represent the board
    vector<vector<int>> board(N, vector<int>(N, 0));

    // Solve the N-Queens problem
    if (solveNQueens(board, 0, N)) {
        cout << "One possible solution is:\n";
        printBoard(board, N);
    } else {
        cout << "No solution exists.\n";
    }

    return 0;
}
TC:N!
SC:N2
